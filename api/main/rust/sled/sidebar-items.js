initSidebarItems({"enum":[["Error","An Error type encapsulating various issues that may come up in the operation of a `Db`."],["Event","An event that happened to a key that a subscriber is interested in."],["Mode","The high-level database mode, according to the trade-offs of the RUM conjecture."]],"fn":[["open","Opens a `Db` with a default configuration at the specified path. This will create a new storage directory at the specified path if it does not already exist. You can use the `Db::was_recovered` method to determine if your database was recovered from a previous instance. You can use `Config::create_new` if you want to increase the chances that the database will be freshly created."]],"mod":[["transaction","Fully serializable (ACID) multi-`Tree` transactions"]],"struct":[["Batch","A batch of updates that will be applied atomically to the Tree."],["CompareAndSwapError","Compare and swap error."],["Config","Top-level configuration for the system."],["Db","The `sled` embedded database! Implements `Deref<Target = sled::Tree>` to refer to a default keyspace / namespace / bucket."],["IVec","A buffer that may either be inline or remote and protected by an Arc"],["Iter","An iterator over keys and values in a `Tree`."],["Subscriber","A subscriber listening on a specified prefix"],["Tree","A flash-sympathetic persistent lock-free B+ tree."]],"trait":[["MergeOperator","A function that may be configured on a particular shared `Tree` that will be applied as a kind of read-modify-write operator to any values that are written using the `Tree::merge` method."]],"type":[["Result","The top-level result type for dealing with fallible operations. The errors tend to be fail-stop, and nested results are used in cases where the outer fail-stop error can have try `?` used on it, exposing the inner operation that is expected to fail under normal operation. The philosophy behind this is detailed on the sled blog."]]});